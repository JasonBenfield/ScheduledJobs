// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XTI_JobsDB.EF;

#nullable disable

namespace XTIJobsDB.SqlServer.Migrations
{
    [DbContext(typeof(JobDbContext))]
    partial class JobDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("XTI_JobsDB.EF.ExpandedTriggeredJobEntity", b =>
                {
                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int>("EventNotificationID")
                        .HasColumnType("int");

                    b.Property<int>("JobDefinitionID")
                        .HasColumnType("int");

                    b.Property<string>("JobDisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobStatus")
                        .HasColumnType("int");

                    b.Property<int>("TaskCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeJobEnded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeJobStarted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("JobID");

                    b.ToTable((string)null);

                    b.ToView("ExpandedTriggeredJobs", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.EF.HierarchicalTriggeredJobTaskEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ChildTaskID")
                        .HasColumnType("int");

                    b.Property<int>("ParentTaskID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ChildTaskID");

                    b.HasIndex("ParentTaskID", "ChildTaskID");

                    b.ToTable("HierarchicalTriggeredJobTasks", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.EF.JobDefinitionEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DeleteAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Timeout")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("ID");

                    b.HasIndex("JobKey")
                        .IsUnique();

                    b.ToTable("JobDefinitions", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.EF.JobScheduleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("JobDefinitionID")
                        .HasColumnType("int");

                    b.Property<string>("Serialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("JobDefinitionID")
                        .IsUnique();

                    b.ToTable("JobSchedules", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.EF.JobTaskDefinitionEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("JobDefinitionID")
                        .HasColumnType("int");

                    b.Property<string>("TaskKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Timeout")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.HasKey("ID");

                    b.HasIndex("JobDefinitionID", "TaskKey")
                        .IsUnique();

                    b.ToTable("JobTaskDefinitions", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.EF.LogEntryEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("SourceLogEntryKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TaskID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeOccurred")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.ToTable("LogEntries", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.EF.TriggeredJobEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EventNotificationID")
                        .HasColumnType("int");

                    b.Property<int>("JobDefinitionID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeInactive")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeToDelete")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("EventNotificationID");

                    b.HasIndex("JobDefinitionID");

                    b.ToTable("TriggeredJobs", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.EF.TriggeredJobTaskEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Generation")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskDefinitionID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeActive")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeEnded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeInactive")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeStarted")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TriggeredJobID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TaskDefinitionID");

                    b.HasIndex("TriggeredJobID", "Sequence");

                    b.ToTable("TriggeredJobTasks", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.Entities.EventDefinitionEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ActiveFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<bool>("CompareSourceKeyAndDataForDuplication")
                        .HasColumnType("bit");

                    b.Property<string>("DeleteAfter")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DuplicateHandling")
                        .HasColumnType("int");

                    b.Property<string>("EventKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("TimeToStartNotifications")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("EventKey")
                        .IsUnique();

                    b.ToTable("EventDefinitions", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.Entities.EventNotificationEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EventDefinitionID")
                        .HasColumnType("int");

                    b.Property<string>("SourceData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TimeActive")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeAdded")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeInactive")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("TimeToDelete")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("EventDefinitionID");

                    b.ToTable("EventNotifications", (string)null);
                });

            modelBuilder.Entity("XTI_JobsDB.EF.HierarchicalTriggeredJobTaskEntity", b =>
                {
                    b.HasOne("XTI_JobsDB.EF.TriggeredJobTaskEntity", null)
                        .WithMany()
                        .HasForeignKey("ChildTaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_JobsDB.EF.TriggeredJobTaskEntity", null)
                        .WithMany()
                        .HasForeignKey("ParentTaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_JobsDB.EF.JobScheduleEntity", b =>
                {
                    b.HasOne("XTI_JobsDB.EF.JobDefinitionEntity", null)
                        .WithMany()
                        .HasForeignKey("JobDefinitionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_JobsDB.EF.LogEntryEntity", b =>
                {
                    b.HasOne("XTI_JobsDB.EF.TriggeredJobTaskEntity", null)
                        .WithMany()
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_JobsDB.EF.TriggeredJobEntity", b =>
                {
                    b.HasOne("XTI_JobsDB.Entities.EventNotificationEntity", null)
                        .WithMany()
                        .HasForeignKey("EventNotificationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_JobsDB.EF.JobDefinitionEntity", null)
                        .WithMany()
                        .HasForeignKey("JobDefinitionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_JobsDB.EF.TriggeredJobTaskEntity", b =>
                {
                    b.HasOne("XTI_JobsDB.EF.JobTaskDefinitionEntity", null)
                        .WithMany()
                        .HasForeignKey("TaskDefinitionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XTI_JobsDB.EF.TriggeredJobEntity", null)
                        .WithMany()
                        .HasForeignKey("TriggeredJobID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("XTI_JobsDB.Entities.EventNotificationEntity", b =>
                {
                    b.HasOne("XTI_JobsDB.Entities.EventDefinitionEntity", null)
                        .WithMany()
                        .HasForeignKey("EventDefinitionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
